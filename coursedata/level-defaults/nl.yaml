1:
    intro_text: |
        Welkom bij Hedy! In Level 1 kun je de commando's `print`, `ask` en `echo` gebruiken.

        Links in jouw scherm staan alle commando's van Level 1.

        Druk op de blauwe knop en de code wordt alvast voor jou getypt!

        Probeer de code dan zelf met de groene 'Voer de code uit' knop onder het linker programmeerveld.

        Weet je niet wat je wilt maken? In de volgende tabjes staan opdrachten om te proberen.

    start_code: "print hallo wereld!"
    commands:
    -   name: "print"
        explanation: "Iets printen met `print`."
        example: "Bijvoorbeeld: print Hallo welkom bij Hedy!"
        demo_code: "print Hallo welkom bij Hedy!"
    -   name: "ask"
        explanation: "Iets vragen met `ask`."
        example: "Bijvoorbeeld: ask Wat is je lievelingskleur?"
        demo_code: "ask Wat is je lievelingskleur?"
    -   name: "echo"
        explanation: "Iets herhalen dat is ingetypt met `echo`."
        example: "Bijvoorbeeld: echo dus je lievelingskleur is"
        demo_code: |-
            ask Wat is je lievelingskleur?
            echo dus je lievelingskleur is 
    -   name: "forward"
        explanation: "Een lijn trekken met `forward`."
        example: "Bijvoorbeeld: forward 100"
        demo_code: "forward 100"
    -   name: "turn"
        explanation: "De teken-schildpad draaien met `turn`"
        example: "Bijvoorbeeld: turn"
        demo_code: |-
            forward 25
            turn left
            forward 25
            turn right
2:
    intro_text: |
        In level 2 leren we iets nieuws. Je kunt een woord een naam geven met `is`. Je kunt daarna in je code overal naam gebruiken. Dat wordt dan vervangen door Hedy. Zo:

        ```
        naam is Hedy
        print hallo naam
        ```

        De `ask` is in level 2 ook veranderd, het antwoord sla je ook op met een naam:

        ```
        antwoord is ask Hoe heet jij?
        ```

        Print werkt nog zoals in Level 1, en echo heb je niet meer nodig.

        In level 2 kan je ook een lijstje maken. Uit de lijst kun je dan iets willekeurigs kiezen. Dat doe je met `at random` (je zegt: et ren-dom).

        Je vindt alle codes van level 2 weer in de linkerbalk. Ook zijn er weer tabjes met opdrachten.
    start_code: "print hallo wereld!"
    commands:
    -   name: "is"
        explanation: "Een woord een naam geven met `is`. Je mag de naam zelf kiezen."
        example: "Bijvoorbeeld: voornaam is Hedy."
        demo_code: |-
            voornaam is Hedy
            print ik heet voornaam
    -   name: "is - turtle"
        explanation: "Een getal een naam geven met `is`. Je mag de naam zelf kiezen."
        example: "Bijvoorbeeld: hoek is 90."
        demo_code: |-
            hoek is 90
            turn hoek
            forward 100
    -   name: "ask"
        explanation: "Iets vragen met `ask`. Maar let op! Je moet je antwoord een naam geven met `is`."
        example: "Bijvoorbeeld: kleur is ask Wat is je lievelingskleur?"
        demo_code: |-
            kleur is ask Wat is je lievelingskleur?
            print Jouw favoriet is dus kleur
    -   name: "kies_random"
        explanation: "Iets willekeurigs uit een groep woorden kiezen met `at` en `random`."
        example: "Bijvoorbeeld: dieren is hond, kat, kangoeroe."
        demo_code: |-
            dieren is hond, kat, kangoeroe
            print dieren at random
3:
    start_code: "print 'hallo wereld'"
    intro_text: |
        In level 3 zijn `ask` en `print` nu anders.

        Je moet tekst die je letterlijk wilt printen tussen aanhalingstekens zetten.

        Dat is handig, want nu kan je alle woorden printen die je maar wilt. Ook de woorden die je hebt gebruikt om iets in op te slaan met `is`.

        De meeste programmeertalen gebruiken ook aanhalingstekens bij het printen, dus we komen zo al een stapje dichterbij echt programmeren!

        ## Opdrachten worden steeds moeilijker
        Je vindt de commando's weer links, en opdrachten in de volgende tabjes. De opdrachten worden in de opeenvolgende tabjes nu steeds iets moeilijker.
        Begin dus links met het verhaal, en werk zo door om steeds meer uitgedaagd te worden.

    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print 'Hallo welkom bij Hedy.'"
        demo_code: "print 'Hallo welkom bij Hedy'"
    -   name: "is"
        explanation: "Een stukje tekst een naam geven met `is` en printen zonder aanhalingstekens"
        example: "Bijvoorbeeld: naam is Hedy."
        demo_code: |-
            naam is Hedy
            print 'ik heet ' naam
    -   name: "ask"
        explanation: "Iets vragen met `ask`"
        example: "Bijvoorbeeld: kleur is ask Wat is je lievelingskleur?"
        demo_code: |-
            kleur is ask 'Wat is je lievelingskleur?'
            print 'Jouw favoriet is dus ' kleur
4:
    start_code: |-
        naam is ask 'hoe heet jij?'
        if naam is Hedy print 'leuk' else print 'minder leuk!'
    intro_text: |
        `ask` en `print` werken nog zoals in level 3.

        In level 4 is er iets nieuws, de `if`! If is Engels voor als. Met de `if` kun je een keuze maken tussen twee verschillende opties.

        ## Voorbeeld Hedy Code
        ```
        naam is ask 'hoe heet jij?'
        if naam is Hedy print 'leuk' else print 'minder leuk!'
        ```

        Deze code print leuk als je Hedy als naam invoert, en minder leuk als je iets anders invoert.

        Je mag `if` ook combineren met `in`, om te kijken of iets in een lijst zit.

        ## Voorbeeld Hedy Code
        ```
        mooie_kleuren is geel, rood
        kleur is ask 'Wat is jouw lievelingskleur?'
        if kleur in mooie_kleuren print 'mooi' else print 'meh!'
        ```

        Deze code print mooi als je geel of rood antwoordt, en anders meh!

        ## Tip
        Soms wordt code met een `if` erg lang en past het niet meer goed in het tekstvlak. Je mag dan een enter gebruiken en de code over twee regels verdelen. Begin dan de tweede regel met een `else`:
        ```
        naam is ask 'hoe heet jij?'
        if naam is Hedy print 'leuk'
        else print 'minder leuk!'
        ```

        ## Opdrachten worden steeds moeilijker

        Ook in level 4 worden de opdrachten in de tabjes steeds iets moeilijker. Doe ze dus van links naar rechts.
    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print 'Hallo welkom bij Hedy.'"
        demo_code: "print 'Hallo welkom bij Hedy'"
    -   name: "ask"
        explanation: "Iets vragen met `ask`."
        example: "Bijvoorbeeld: kleur is ask 'Wat is je lievelingskleur?'"
        demo_code: |-
            kleur is ask 'Wat is je lievelingskleur?'
            print 'Jouw favoriet is dus ' kleur
    -   name: "if"
        explanation: "Een keuze maken met `if`"
        example: "Bijvoorbeeld: if kleur is groen print 'mooi!' else print 'niet zo mooi'"
        demo_code: |-
            kleur is ask 'Wat is je lievelingskleur?'
            if kleur is groen print 'mooi!' else print 'niet zo mooi'
    -   name: "if met turtle"
        explanation: "Een keuze maken met `if`"
        example: "Bijvoorbeeld: if antwoord is ver forward 100 else forward 5"
        demo_code: |-
            antwoord is ask 'Hoe ver moet ik lopen?'
            if antwoord is ver forward 100 else forward 5
5:
    start_code: "print '5 keer 5 is ' 5 * 5"
    intro_text: |
        `ask`, `print` en `if` werken nog zoals in level 4.
        Maar in Level 5 is er iets nieuws, je kunt nu ook rekenen.

        De plus is makkelijk, die schrijf je zoals bij rekenen: `5 + 5` bijvoorbeeld. De min gaat ook goed, dat is `5 - 5`.

        De keer is een beetje anders, want er zit namelijk geen keer op je toetsenbord. Zoek maar eens, die is er echt niet!
        Daarom doen we de keer met het sterretje boven de 8: `5 * 5`. Lees dat maar als "5 keer 5", dan onthoud je het het makkeljkst.
        ## Voorbeeld Hedy code
        ```
        print '5 plus 5 is ' 5 + 5
        print '5 min 5 is ' 5 - 5
        print '5 keer 5 is ' 5 * 5
        ```
    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print '5 keer 5 is ' 5 * 5"
        demo_code: "print '5 keer 5 is ' 5 * 5"
    -   name: "`ask` en `if` samen met rekenen"
        explanation: "Het antwoord van een som vragen met `ask` en kijken of het goed is."
        example: "Bijvoorbeeld: antwoord is ask 'Hoeveel is 10 plus 10?'"
        demo_code: |-
            antwoord is ask 'Hoeveel is 10 plus 10?'
            if antwoord is 20 print 'Goedzo!' else print 'Foutje'
    -   name: "`ask` en `if` turtle"
        explanation: "De gebruiker vragen hoeveel hoeken hij wil"
        example: "Bijvoorbeeld: hoeken is ask 'hoeveel hoeken krijgt dit figuur?'"
        demo_code: |-
            hoeken is ask 'Hoeveel hoeken krijgt dit figuur?'
            hoek is 360 / hoeken
            forward 50
6:
    start_code: "repeat 3 times print 'Hedy is leuk!'"
    intro_text: |
        `ask`, `print` en `if` werken nog zoals in level 4 en 5.
        Maar in Level 6 is er iets nieuws: de `repeat`.
        Met `repeat` kun je codes een aantal keer herhalen.

        ## Voorbeeld Hedy code
        ```
        repeat 3 times print 'Hedy is leuk!'
        ```
    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print 'Hallo welkom bij Hedy.'"
        demo_code: "print 'Hallo welkom bij Hedy'"
    -   name: "ask"
        explanation: "Iets vragen met `ask`."
        example: "Bijvoorbeeld: kleur is ask 'Wat is je lievelingskleur?'"
        demo_code: |-
            kleur is ask 'Wat is je lievelingskleur?'
            print 'Jouw favoriet is dus ' kleur
    -   name: "if"
        explanation: "Een keuze maken met `if`"
        example: "Bijvoorbeeld: if kleur is groen print 'mooi!' else print 'niet zo mooi'"
        demo_code: |-
            kleur is ask 'Wat is je lievelingskleur?'
            if kleur is groen print 'mooi!' else print 'niet zo mooi'
    -   name: "repeat"
        explanation: "Iets herhalen met `repeat`."
        example: "Bijvoorbeeld: repeat 3 times print 'Hedy is leuk!'"
        demo_code: |-
            repeat 3 times print 'Hedy is leuk!'
    -   name: "repeat - turtle"
        explanation: "Een regel code herhalen met `repeat`."
        example: "Bijvoorbeeld: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
7:
    start_code: |-
        repeat 5 times
            print 'Hallo allemaal'
            print 'Dit wordt allemaal 5 keer herhaald'
    intro_text: |
        `ask` en `print` werken nog zoals eerst, maar `if` en `repeat` zijn nu veranderd!
        Je kunt nu meerdere regels samen herhalen. Dan moet je de regels die herhaald worden wel inspringen,
        dat betekent dat ze moeten beginnen met vier spaties.
        Ook als je maar één regel wilt herhalen moet je inspringen!
        ## Voorbeeld Hedy code
        ```
        repeat 5 times
            print 'Hallo allemaal'
            print 'Dit wordt allemaal 5 keer herhaald'
        ```

    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print '5 keer 5 is ' 5 * 5"
        demo_code: "print '5 keer 5 is ' 5 * 5"
    -   name: "`if` met meerdere regels"
        explanation: "Het antwoord van een som vragen met `ask` en kijken of het goed is. Nu printen we twee regels uit."
        example: "Bijvoorbeeld: antwoord is ask 'Hoeveel is 10 plus 10?'"
        demo_code: |-
            antwoord is ask 'Hoeveel is 10 plus 10?'
            if antwoord is 20
                print 'Goedzo!'
                print 'Het antwoord was inderdaad ' antwoord
            else
                print 'Foutje'
                print 'Het antwoord moest zijn 20'
    -   name: "`repeat` met de turtle"
        explanation: "Meerdere regels samen herhalen"
        example: "Bijvoorbeeld: een vierkant maken"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
8:
    start_code: |-
        dieren is hond, kat, papegaai
        for dier in dieren
          print dier ' is een leuk dier!'
    intro_text: |
        In dit level leren we een nieuwe code, de code `for`. Met `for` kun je alle dingen in een lijstje gebruiken.
        `for` mag meerdere regels gebruiken, net zoals de `repeat` and `if`, dus alle regels eronder moeten met spaties beginnen.

        ## Voorbeeld Hedy code
        ```
        dieren is hond, kat, papegaai
        for dier in dieren
          print dier ' is een leuk dier!'
        ```
    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print '5 keer 5 is ' 5 * 5"
        demo_code: "print '5 keer 5 is ' 5 * 5"
    -   name: "for met een lijst"
        explanation: "Alle dingen in een lijstje printen "
        example: "Bijvoorbeeld: for dier in dieren"
        demo_code: |-
            dieren is hond, kat, papegaai
            for dier in dieren
              print dier
9:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Wie niet weg is is gezien'
    intro_text:
        We gaan nu een extra vorm van de `for` toevoegen! Je mag ook `for i in range 1 to 5` typen in plaats van `repeat 5 times`. Het leuke is dat je die variabele `i` ook in je programma kan gebruiken!
        Je moet nog steeds alle regels die herhaald worden inspringen (dat betekent dat ze moeten beginnen met vier spaties)

    commands:
    -   name: "for met i"
        explanation: "`for` met getallen"
        example: "for i in range 1 to 10"
        demo_code: |
            for i in range 1 to 10
                print i
            print 'Wie niet weg is is gezien'
10:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Wie niet weg is is gezien'
    intro_text: "Nu veranderen we nog een klein stukje dat te maken heeft met het inspringen. Elke keer dat we gaan inspringen moeten we een : bij de regel ervoor zetten."
    commands:
    -   name: "for met :"
        explanation: "Bij `for` moet je dus een `:` er achter zetten!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 10:
                print i
            print 'wie niet weg is is gezien'
    -   name: "if met :"
        explanation: "We moeten hetzelfde doen met al onze `if` statements"
        example: "if kleur is groen:"
        demo_code: |-
            kleur is groen
            if kleur is groen:
                print 'De kleur is groen'
            else:
                print 'De kleur is niet groen'
    -   name: "(Optioneel) elif"
        explanation: "Verder is er een nieuw commando dat je mag gebruiken: `elif`. `elif` is eigenlijk else if. Je kijkt dus eerst naar `if` en als die niet waar is dan probeer je `elif` en als die niet waar is dan ga je naar de `else`."
        example: "elif a is 5:"
        demo_code: |-
            a is 2
            if a is 1:
                print 'a is 1'
            elif a is 2:
                print 'a is 2'
            else:
                print 'a is niet 1 of 2'
11:
    start_code: |-
        for i in range 1 to 3:
            for j in range 1 to 5:
                print 'we zitten nu in rondje: ' i ' en de tel is: ' j
    intro_text: "Vanaf nu mogen we ook een loopje vaker uitvoeren. In het voorbeeld tellen we 3 maal tot 5. Dus we doen 3 rondjes en tellen elke keer tot 5"
    commands:
    -   name: "for onder elkaar"
        explanation: "Dit is een voorbeeld van for loopjes onder/in elkaar zetten"
        demo_code: |-
            for i in range 1 to 3:
                for j in range 1 to 5:
                    print 'we zitten nu in rondje: ' i ' en de tel is: ' j
    -   name: "if onder elkaar"
        explanation: "We kunnen hetzelfde doen met if statements"
        demo_code: |-
            kleur is blauw
            kleurtwee is geel
            if kleur is blauw:
                if kleurtwee is geel:
                    print 'Samen is dit groen!'
12:
    start_code: |-
        leeftijd is input('Hoe oud ben jij?')
        print('Dus jij hebt zo veel verjaardagen gehad:')
        for i in range(0, leeftijd):
            print(i)
    intro_text: "We gaan nu ronde haakjes toevoegen en ask veranderen! Ask noemen we nu input! Bij print, input en for gaan we nu haakjes zetten!"
    commands:
    -   name: "Print"
        explanation: "We gaan nu haakjes om print heen zetten!"
        example: "Bijvoorbeeld: print('Hallo Wereld')"
        demo_code: "print('Hallo Wereld')"
    -   name: "Ask naar input!"
        explanation: "We zetten ask om en noemen het nu input, ook zetten we haakjes er omheen"
        example: "Bijvoorbeeld: naam is input('Hoe heet jij?')"
        demo_code: |-
            naam is input('Hoe heet jij?')
            print('Dus jij heet ' naam)
    -   name: "For met haakjes"
        explanation: "We gaan nu in plaats van for i in range 1 to 10, haakjes zetten om de getallen. for i in range(0, 10):"
        example: "Bijvoorbeeld: for i in range(0, 10):"
        demo_code: |-
            for i in range(0, 10):
                print(i)
            print('Wie niet weg is is gezien')
13:
    start_code: |-
        fruit is ['appel', 'banaan', 'kers']
        print(fruit)
    intro_text: "Nu gaan we vierkante haakjes zetten om lijstjes! We moeten nu ook enkele aanhalingstekens (') om items in lijstjes zetten!"
    commands:
    -   name: "Haakjes om lijstjes"
        explanation: "We gaan nu haakjes om lijstjes heen zetten! Let ook op de enkele aanhalingstekens om items in het lijstje!"
        example: "Bijvoorbeeld: fruit is ['appel', 'banaan', 'kers']"
        demo_code: |-
            fruit is ['appel', 'banaan', 'kers']
            print(fruit)
    -   name: "Pak iets uit een lijst"
        explanation: "Om een item uit een lijst te krijgen gebruiken we [nummer] dus met fruit[1] krijg je de eerste fruit uit de lijst !"
        example: "Bijvoorbeeld: eerstefruit is fruit[1]"
        demo_code: |-
            fruit is ['banaan', 'appel', 'kers']
            eerstefruit is fruit[1]
            print(eerstefruit)
    -   name: "Pak een random item uit een lijst"
        explanation: "Om een random item uit een lijst te pakken, gebruiken we [random]. Dus fruit[random] is pak een random fruit uit de lijst!"
        example: "Bijvoorbeeld: randomfruit is fruit[random]"
        demo_code: |-
            fruit is ['banaan', 'appel', 'kers']
            randomfruit is fruit[random]
            print(randomfruit)
14:
    start_code: |-
        je_bent_er_nog is False
        ben_je_er_nog is input('ben je er nog? ja of nee?')
        if ben_je_er_nog is ja:
            je_bent_er_nog is True
        if je_bent_er_nog is True:
            print('Hallo!')
        if je_bent_er_nog is False:
            print('Doei!')
    intro_text: "We gaan nu het hebben over waar en niet waar, je kan een variabele op waar zetten (`True`) en op niet waar zetten: (`False`). Dit kan je bijvoorbeeld gebruiken om bij te houden of je al iets heb gedaan."
    commands:
      - name: "Voorbeeld"
        explanation: "Hierbij een voorbeeldje van een vraag om een rekensom te beantwoorden. Je mag 5 keer antwoord geven. Als het goed is, maakt het goed_antwoord `True` (dus waar)"
        example: "goed_antwoord is `False`"
        demo_code: |-
            for i in range(0, 5):
                goed_antwoord is False
                antwoord is input('Wat is 5*5')
                if antwoord is 25:
                    goed_antwoord is True
                else:
                    goed_antwoord is False
                if goed_antwoord is True:
                    print('Dat is goed!')
                if goed_antwoord is False:
                    print('Dat is fout! Nog ' 5-i ' pogingen over')
15:
    start_code: |-
        je_bent_er_nog is False
        ben_je_er_nog is input('ben je er nog? ja of nee?')
        if ben_je_er_nog is ja:
            je_bent_er_nog is True
        antwoord is input('Wat is 5*5?')
        if je_bent_er_nog is True and antwoord is 25:
            print('Je hebt ja gezegd en een goed antwoord gegeven!')
    intro_text: "We gaan nu `and` en `or` gebruiken! Als je 2 dingen wilt checken hoef je niet meer 2 ifjes in elkaar te doen maar kan je nu `and` gebruiken. Beide dingen in de if moeten waar zijn als je een `and` gebruikt. We kunnen ook `or` gebruiken. Daarbij moet er 1 van de twee waar zijn."
    commands:
    -   name: "And"
        explanation: "`And` is dus en. Beide dingen links en rechts van de `and` moeten waar zijn."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            antwoord1 is input('hoeveel is 3+2?')
            antwoord2 is input('hoeveel is 2+2?')
            if antwoord1 is 5 and antwoord2 is 4:
                print('beide antwoorden zijn goed!')
            else:
                print('Minimaal 1 antwoord is fout!')
    -   name: "Or"
        explanation: "`Or` is dus of. Minimaal 1 van de 2 tussen de `or` moet goed zijn. Allebei goed mag ook."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            antwoord1 is input('hoeveel is 3+2?')
            antwoord2 is input('hoeveel is 2+2?')
            if antwoord1 is 5 or antwoord2 is 4:
                print('Je hebt minimaal 1 antwoord goed!')
            else:
                print('Beide antwoorden zijn fout!')
16:
    start_code: |-
        # Dit is een programma die een aantal sommen gaat vragen
        for i in range(1, 10):
            # We gaan de tafel van 5 vragen
            antwoord is input('Hoeveel is ' i ' keer 5?')
            # We kijken of de som gelijk is aan het antwoord
            goed_antwoord is i * 5
            if antwoord is goed_antwoord:
                print(antwoord ' is goed')
            else:
                print('Dat is fout, het moet zijn: ' i*5)
    intro_text: "Als je grotere programma's maakt dan heb je ook een manier nodig om bij te houden wat welk stukje code doet. Hiervoor gebruiken we comments. Een comment ziet er het volgende uit:\n `# dit is een comment`. Alles dat na de # wordt geschreven is dus onzichtbaar voor de code"
    commands:
    -   name: "Comment"
        explanation: "We kunnen overal waar we willen comments plaatsen."
        example: "# Dit is een comment"
        demo_code: |-
            # Dit programma print hallo
            # Het is gemaakt in Hedy
            # Het doet eigenlijk verder niets!
            print('hallo!')
17:
    start_code: |-
        leeftijd is input('Hoe oud ben jij?')
        if leeftijd < 13:
            print('Dan ben je jonger dan ik!')
        elif leeftijd > 13:
            print('Dan ben je ouder dan ik!')
    intro_text: "We gaan nieuwe tekens leren, je kent ze misschien wel van rekenen/wiskunde, `<` en `>`. De `<` kijkt of het eerste getal kleiner is dan de tweede zoals `4 < 5`. De `>` kijkt of iets groter is dan het tweede getal zoals `6 > 5`."
    commands:
    -   name: "Kleiner"
        explanation: "De `<` kijkt dus of het eerste getal kleiner is dan het tweede getal. Als je wilt kijken of een variabele kleiner is dan 15 gebruik je `variabele < 15`"
        example: "Bijvoorbeeld: leeftijd < 12"
        demo_code: |-
            leeftijd is input('Hoe oud ben jij?')
            if leeftijd < 13:
                print('Dan ben je jonger dan ik!')
    -   name: "Groter"
        explanation: "De `>` kijkt dus of het eerste getal groter is dan het tweede getal. Als je wilt kijken of een variabele groter is dan 15 gebruik je `variabele > 15`"
        example: "Bijvoorbeeld: leeftijd > 12"
        demo_code: |-
            leeftijd is input('Hoe oud ben jij?')
            if leeftijd > 13:
                print('Dan ben je ouder dan ik!')
18:
    start_code: |-
        goed_antwoord is False
        # we gaan door totdat een goed antwoord is gegeven!
        while goed_antwoord is False:
            antwoord is input('Wat is 5 keer 5?')
            if antwoord is 25:
                goed_antwoord is True
                print('Er is een goed antwoord gegeven')
    intro_text: "Nu gaan we een nieuwe loop leren: De `while` loop! We gaan door zo lang het statement dat we hebben waar is! Dus bij de voorbeeldcode gaan we door totdat er een goed antwoord is gegeven. Als er nooit een goed antwoord wordt gegeven, dan stopt de loop nooit!"
    commands:
    -   name: "Boolean while"
        explanation: "We kunnen dus een `while` loop gebruiken met de `True` en `False`"
        example: "Bijvoorbeeld: while goed_antwoord is False"
        demo_code: |-
            goed_antwoord is False
            # we gaan door totdat een goed antwoord is gegeven!
            while goed_antwoord is False:
                antwoord is input('Wat is 5 keer 5?')
                if antwoord is 25:
                    goed_antwoord is True
                    print('Er is een goed antwoord gegeven')
    -   name: "Smaller while"
        explanation: "We kunnen een `while` loop ook gebruiken met `<` en `>`. Let wel op dat je het getal ooit groter maakt. Anders ga je de loop nooit uit"
        example: "Bijvoorbeeld: while tel < 3"
        demo_code: |-
            tel is 1
            # we gaan door totdat tel 3 is!
            while tel < 3:
                print('Dit is de ' tel 'e keer')
                tel is tel + 1
            print('We zijn klaar')
19:
    start_code: |-
        lijst is ['eerste', 'tweede', 'derde']
        tweedewaarde is lijst[2]
        print(tweedewaarde)
    intro_text: "Bij een lijst kan je een specifieke waarde pakken. Stel je wilt het tweede ding in de lijst hebben, dan typ je `lijst[2]`."
    commands:
    -   name: "Optellen"
        explanation: "We kunnen bijvoorbeeld alles bij elkaar optellen"
        example: "lijst[1]"
        demo_code: |-
            lijst is ['1', '2', '3']
            optellen is lijst[1] + lijst[2]
            optellen is optellen + lijst[3]
            # we verwachten hier 6
            print(optellen)
20:
    start_code: |-
        fruit is ['appel', 'banaan', 'kers']
        for i in range(1, 3):
            print(fruit[i])
    intro_text: "We kunnen ook alles van de lijst bekijken. Omdat er drie dingen in zitten, pakken we de for loop van 1 tot 3. Nu printen we alles uit wat in de lijst zit."
    commands:
    -   name: "Lengte van een lijst"
        explanation: "Met `length` kan je zien hoe groot een lijst is. Hier is length bijvoorbeeld 3 want we hebben 3 dingen in de lijst"
        example: "length(fruit)"
        demo_code: |-
            fruit is ['appel', 'banaan', 'kers']
            print('lengte van de lijst is ' length(fruit))
            for i in range(1, length(fruit)):
                print(fruit[i])
21:
    start_code: |-
        print('Hoeveel is 5+3?')
        antwoord = 5+3
        print('antwoord is nu:')
        print(antwoord)
        if antwoord == 8:
            print('Dat is goed!')
        else:
            print('Helaas dat is fout!')
    intro_text: "Nu veranderen we is in `=` en `==`. Je gebruikt `=` als je iets een getal wilt maken. Als je bijvoorbeeld antwoord 8 wilt maken zeg je antwoord = 8. `==` gebruik je om te kijken of twee dingen hetzelfde zijn."
    commands:
    -   name: "Vergelijken"
        explanation: "Als we gaan vergelijken gebruiken we dus ==. 5+3 == 8 kijkt dus of 5+3 gelijk is aan 8"
        example: "Bijvoorbeeld: 5+3 == 8"
        demo_code: |-
            if 5+3 == 8:
                print('5+3 is inderdaad 8')
            else:
                print('Dit wordt niet geprint want 5+3 is 8!')
    -   name: "Waarde geven"
        explanation: "Als we willen zeggen dat een variabele genaamd antwoord 8 is, dan doen we antwoord = 8."
        example: "Bijvoorbeeld: antwoord = 8"
        demo_code: |-
            print('Hoeveel is 5+3?')
            antwoord = 5+3
            print('antwoord is nu:')
            print(antwoord)
    -   name: "Vergelijken en waarde geven"
        explanation: "Als we gaan vergelijken gebruiken we dus `==`. Als we een waarde geven dan gebruiken we `=`. "
        example: "Bijvoorbeeld: antwoord == 8, antwoord = 8"
        demo_code: |-
            print('Hoeveel is 5+3?')
            antwoord = 5+3
            print('antwoord is nu:')
            print(antwoord)
            if antwoord == 8:
                print('Dat is goed!')
            else:
                print('Helaas dat is fout!')
22:
    start_code: |-
        land = input('In welk land woon jij?')
        if land != Nederland:
            print('Cool!')
        else:
            print('Ik kom ook uit Nederland!')
    intro_text: "We gaan een nieuw teken leren, de `!=` . De ! betekent niet en de = betekent gelijk dus != is niet gelijk. Als voorbeeldje is 5 != 4."
    commands:
    -   name: "Niet gelijk"
        explanation: "Als we gaan kijken of dingen anders zijn, gebruiken we dus `!=`"
        example: "Bijvoorbeeld: 5+3 != 9"
        demo_code: |-
            getal = input('Je mag geen 5 zeggen, wat is een leuk getal?')
            if getal != 5:
                print('Goed zo!')
            else:
                print('Fout! Je mocht geen 5 zeggen')
23:
    start_code: |-
        leeftijd = input('Ik ben 12 jaar, hoe oud ben jij?')
        if leeftijd <= 12:
            print('Dan ben je jonger dan ik!')
        elif leeftijd >= 14:
            print('Dan ben je ouder dan ik!')
    intro_text: "Nu gaan we < en = combineren. Als we willen kijken of iets kleiner of gelijk aan het tweede getal is dan gebruiken we `<=`. Hetzelfde kunnen we doen met `>=`"
    commands:
    -   name: "Kleiner gelijk"
        explanation: "De `<=` kijkt dus of het eerste getal kleiner of gelijk is aan het tweede getal. Dus 5 < 5 is niet waar want 5 is niet kleiner dan 5 maar 5 <= 5 is wel waar want 5 is gelijk aan 5. 6 <= 5 is dus niet waar."
        example: "Bijvoorbeeld: leeftijd <= 12"
        demo_code: |-
            leeftijd = input('Ik ben 13 jaar, hoe oud ben jij?')
            if leeftijd <= 13:
                print('Dan ben je jonger dan ik!')
    -   name: "Groter gelijk"
        explanation: "De `>=` kijkt dus of het eerste getal groter of gelijk is aan het tweede getal. Dus 5 > 5 is niet waar want 5 is niet groter dan 5 maar 5 >= 5 is wel waar want 5 is gelijk aan 5. 4 >= 5 is dus niet waar."
        example: "Bijvoorbeeld: leeftijd >= 12"
        demo_code: |-
            leeftijd = input('Ik ben 11 jaar, hoe oud ben jij?')
            if leeftijd >= 13:
                print('Dan ben je ouder dan ik!')
